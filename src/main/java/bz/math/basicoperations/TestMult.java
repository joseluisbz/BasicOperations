package bz.math.basicoperations;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineUnavailableException;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.Timer;
import javax.swing.filechooser.FileSystemView;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author joseluisbz
 */
public class TestMult extends javax.swing.JFrame {

    //http://www.vineetmanohar.com/2009/11/3-ways-to-run-java-main-from-maven/
    //mvn compile -f /home/joseluisbz/NetBeansProjects/BasicOperations/pom.xml
    //mvn exec:java -Dexec.mainClass=bz.math.basicoperations.TestMult -f /home/joseluisbz/NetBeansProjects/BasicOperations/pom.xml
    //mvn exec:java -Dexec.mainClass=bz.math.basicoperations.TestMult
    //mvn exec:java -Dexec.mainClass=bz.math.basicoperations.TestMult -o
    static final List<Integer> LIST_MULTIPLIER = new ArrayList<>();
    private static final Map<Integer, MultiplierList> MAP_MULTIPLICAND = new HashMap<>();

    private static Integer quantityMultiplications;
    DefaultListModel defaultListModelCorrect = new DefaultListModel();
    DefaultListModel defaultListModelWrong = new DefaultListModel();

    /**
     * Creates new form TestMult
     */
    public TestMult() {
//        quantityCorrect.
//        processKeyEvent
        System.out.println("System.getProperty(\"user.home\"): " + System.getProperty("user.home"));

        initComponents();
        multiplicandMouseClicked(null);
        multiplierMouseClicked(null);
        product.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                product.select(0, product.getText().length());
            }

            @Override
            public void focusLost(FocusEvent e) {
                product.select(0, 0);
            }
        });

        correctList.setModel(defaultListModelCorrect);
        failsList.setModel(defaultListModelWrong);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        correctList = new javax.swing.JList<>();
        quantityCorrect = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        multiplicand1 = new javax.swing.JCheckBox();
        multiplicand5 = new javax.swing.JCheckBox();
        multiplicand8 = new javax.swing.JCheckBox();
        multiplicand0 = new javax.swing.JCheckBox();
        multiplicand10 = new javax.swing.JCheckBox();
        multiplicand3 = new javax.swing.JCheckBox();
        multiplicand4 = new javax.swing.JCheckBox();
        multiplicand6 = new javax.swing.JCheckBox();
        multiplicand9 = new javax.swing.JCheckBox();
        multiplicand2 = new javax.swing.JCheckBox();
        multiplicand7 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        qtyMultiplicands = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        repeat4 = new javax.swing.JCheckBox();
        repeat10 = new javax.swing.JCheckBox();
        repeat2 = new javax.swing.JCheckBox();
        repeat9 = new javax.swing.JCheckBox();
        repeat3 = new javax.swing.JCheckBox();
        repeat1 = new javax.swing.JCheckBox();
        repeat5 = new javax.swing.JCheckBox();
        repeat7 = new javax.swing.JCheckBox();
        repeat8 = new javax.swing.JCheckBox();
        repeat6 = new javax.swing.JCheckBox();
        repeat0 = new javax.swing.JCheckBox();
        jTextField3 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        failsList = new javax.swing.JList<>();
        quantityWrong = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        product = new javax.swing.JTextField(){
            //https://stackoverflow.com/a/11609982/1410223
            public void processKeyEvent(KeyEvent ev) {
                char c = ev.getKeyChar();
                try {
                    // Ignore all non-printable characters. Just check the printable ones.
                    if (c > 31 && c < 127) {
                        Integer.parseInt(c + "");
                    }
                    super.processKeyEvent(ev);
                }
                catch (NumberFormatException nfe) {
                    // Do nothing. Character inputted is not a number, so ignore it.
                }
            }
        };
        multiplier = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        multiplicand = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        correctAnswer = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        remainingTime = new javax.swing.JTextField();
        WrongAnswer = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        timeComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        mutliplier1 = new javax.swing.JCheckBox();
        mutliplier5 = new javax.swing.JCheckBox();
        mutliplier8 = new javax.swing.JCheckBox();
        mutliplier0 = new javax.swing.JCheckBox();
        mutliplier10 = new javax.swing.JCheckBox();
        mutliplier3 = new javax.swing.JCheckBox();
        mutliplier4 = new javax.swing.JCheckBox();
        mutliplier6 = new javax.swing.JCheckBox();
        mutliplier9 = new javax.swing.JCheckBox();
        mutliplier2 = new javax.swing.JCheckBox();
        mutliplier7 = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        qtyMultipliers = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        multiplications = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        correct = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        wrong = new javax.swing.JTextField();
        left = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(java.awt.Color.green);

        jLabel9.setText("Correct:");

        correctList.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        jScrollPane1.setViewportView(correctList);

        quantityCorrect.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        quantityCorrect.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantityCorrect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 90, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(quantityCorrect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(0, 0, 128));

        multiplicand1.setText("1");
        multiplicand1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand5.setSelected(true);
        multiplicand5.setText("5");
        multiplicand5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand8.setSelected(true);
        multiplicand8.setText("8");
        multiplicand8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand0.setText("0");
        multiplicand0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand10.setText("10");
        multiplicand10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand3.setSelected(true);
        multiplicand3.setText("3");
        multiplicand3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand4.setSelected(true);
        multiplicand4.setText("4");
        multiplicand4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand6.setSelected(true);
        multiplicand6.setText("6");
        multiplicand6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand9.setSelected(true);
        multiplicand9.setText("9");
        multiplicand9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand2.setSelected(true);
        multiplicand2.setText("2");
        multiplicand2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        multiplicand7.setSelected(true);
        multiplicand7.setText("7");
        multiplicand7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplicandMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(multiplicand0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiplicand10)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiplicand0)
                    .addComponent(multiplicand1)
                    .addComponent(multiplicand2)
                    .addComponent(multiplicand3)
                    .addComponent(multiplicand4)
                    .addComponent(multiplicand5)
                    .addComponent(multiplicand6)
                    .addComponent(multiplicand7)
                    .addComponent(multiplicand8)
                    .addComponent(multiplicand9)
                    .addComponent(multiplicand10))
                .addContainerGap())
        );

        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("Multiplicands: ");

        qtyMultiplicands.setText("00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qtyMultiplicands, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyMultiplicands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(128, 0, 0));

        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("Repeat: ");

        repeat4.setText("4");

        repeat10.setText("10");

        repeat2.setText("2");
        repeat2.setToolTipText("");

        repeat9.setText("9");

        repeat3.setText("3");

        repeat1.setText("1");

        repeat5.setText("5");

        repeat7.setText("7");

        repeat8.setText("8");
        repeat8.setToolTipText("");

        repeat6.setText("6");

        repeat0.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(repeat0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeat10)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeat0)
                    .addComponent(repeat1)
                    .addComponent(repeat2)
                    .addComponent(repeat3)
                    .addComponent(repeat4)
                    .addComponent(repeat5)
                    .addComponent(repeat6)
                    .addComponent(repeat7)
                    .addComponent(repeat8)
                    .addComponent(repeat9)
                    .addComponent(repeat10))
                .addContainerGap())
        );

        jTextField3.setText("00");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel6.setBackground(java.awt.Color.red);

        jLabel10.setText("Wrong:");

        failsList.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        failsList.setForeground(java.awt.Color.red);
        jScrollPane2.setViewportView(failsList);

        quantityWrong.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        quantityWrong.setText("0");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantityWrong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(quantityWrong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.setBackground(java.awt.Color.white);

        product.setBackground(java.awt.Color.black);
        product.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        product.setForeground(java.awt.Color.white);
        product.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        product.setText("zzz");

        multiplier.setEditable(false);
        multiplier.setBackground(java.awt.Color.black);
        multiplier.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        multiplier.setForeground(java.awt.Color.white);
        multiplier.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        multiplier.setText("yy");

        jLabel5.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel5.setText("Multiplier");

        jLabel8.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText(" = ");

        multiplicand.setEditable(false);
        multiplicand.setBackground(java.awt.Color.black);
        multiplicand.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        multiplicand.setForeground(java.awt.Color.white);
        multiplicand.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        multiplicand.setText("xx");
        multiplicand.setToolTipText("");

        jLabel6.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel6.setText("Product");

        jLabel4.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel4.setText("Multiplicand");

        jLabel7.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText(" * ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(multiplicand, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(3, 3, 3)
                .addComponent(jLabel7)
                .addGap(2, 2, 2)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(multiplier)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(6, 6, 6)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(product))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiplicand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(multiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(product, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel8.setBackground(java.awt.Color.darkGray);

        buttonGroup1.add(correctAnswer);
        correctAnswer.setForeground(java.awt.Color.lightGray);
        correctAnswer.setText("Correct");

        jLabel11.setForeground(java.awt.Color.lightGray);
        jLabel11.setText("Remaining (seconds): ");

        remainingTime.setBackground(java.awt.Color.black);
        remainingTime.setForeground(java.awt.Color.white);
        remainingTime.setText("00");
        remainingTime.setFocusable(false);

        buttonGroup1.add(WrongAnswer);
        WrongAnswer.setForeground(java.awt.Color.lightGray);
        WrongAnswer.setText("Wrong");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remainingTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(correctAnswer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WrongAnswer)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(remainingTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(correctAnswer)
                    .addComponent(WrongAnswer))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        timeComboBox.setEditable(true);
        timeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "4", "8", "12", "16", "20", "24" }));
        timeComboBox.setSelectedIndex(3);

        jLabel1.setText("Time (seconds): ");

        start.setBackground(java.awt.Color.lightGray);
        start.setText("Start!");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(start)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(start))
                .addContainerGap())
        );

        jPanel10.setBackground(new java.awt.Color(0, 128, 0));

        mutliplier1.setText("1");
        mutliplier1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier5.setSelected(true);
        mutliplier5.setText("5");
        mutliplier5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier8.setSelected(true);
        mutliplier8.setText("8");
        mutliplier8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier0.setText("0");
        mutliplier0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier10.setText("10");
        mutliplier10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier3.setSelected(true);
        mutliplier3.setText("3");
        mutliplier3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier4.setSelected(true);
        mutliplier4.setText("4");
        mutliplier4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier6.setSelected(true);
        mutliplier6.setText("6");
        mutliplier6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier9.setSelected(true);
        mutliplier9.setText("9");
        mutliplier9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier2.setSelected(true);
        mutliplier2.setText("2");
        mutliplier2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        mutliplier7.setSelected(true);
        mutliplier7.setText("7");
        mutliplier7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                multiplierMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mutliplier0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutliplier10)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mutliplier0)
                    .addComponent(mutliplier1)
                    .addComponent(mutliplier2)
                    .addComponent(mutliplier3)
                    .addComponent(mutliplier4)
                    .addComponent(mutliplier5)
                    .addComponent(mutliplier6)
                    .addComponent(mutliplier7)
                    .addComponent(mutliplier8)
                    .addComponent(mutliplier9)
                    .addComponent(mutliplier10))
                .addContainerGap())
        );

        jLabel12.setForeground(java.awt.Color.white);
        jLabel12.setText("Multipliers: ");

        qtyMultipliers.setText("00");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qtyMultipliers, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(qtyMultipliers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel12.setBackground(java.awt.Color.lightGray);

        jLabel18.setText(" + ");

        jLabel19.setText(" + ");

        jLabel13.setText("multiplications:");

        multiplications.setEditable(false);
        multiplications.setBackground(java.awt.Color.lightGray);
        multiplications.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        multiplications.setText("0");
        multiplications.setFocusable(false);

        jLabel17.setText(" = ");

        correct.setEditable(false);
        correct.setBackground(java.awt.Color.green);
        correct.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        correct.setText("0");
        correct.setFocusable(false);

        jLabel14.setText("Correct:");

        wrong.setEditable(false);
        wrong.setBackground(java.awt.Color.red);
        wrong.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        wrong.setText("0");
        wrong.setFocusable(false);

        left.setEditable(false);
        left.setBackground(java.awt.Color.blue);
        left.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        left.setText("0");
        left.setFocusable(false);

        jLabel16.setText("Left:");

        jLabel15.setText("Wrong:");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(multiplications, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(correct, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wrong, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(left, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(multiplications, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(correct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(wrong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
        start.setText("Running!");
        product.setEditable(true);
        fillMultiplierList();
        fillMultiplicandList();
        defaultListModelCorrect.clear();
        defaultListModelWrong.clear();

        quantityMultiplications = LIST_MULTIPLIER.size() * MAP_MULTIPLICAND.size();
        left.setText(multiplications.getText());
        quantityCorrect.setText("0");
        quantityWrong.setText("0");
        correct.setText("0");
        wrong.setText("0");
        
        Integer delayTimer = Integer.valueOf((String) timeComboBox.getSelectedItem());
        delayerInSeconds(0.4);

        NestedTimer nestedTimer = new NestedTimer();
        Timer timerChecker = new Timer(delayTimer * 1000 - 100, (ActionEvent e) -> {
            String number = product.getText().trim();
            Integer userProduct = number.isEmpty() ? -1 : Integer.valueOf(number);
            Integer randomMultiplicand = Integer.valueOf(multiplicand.getText());
            Integer randomMultiplier = Integer.valueOf(multiplier.getText());

            correctAnswer.setSelected(userProduct == (randomMultiplicand * randomMultiplier));
            WrongAnswer.setSelected(userProduct != (randomMultiplicand * randomMultiplier));
            if (WrongAnswer.isSelected()) {
                defaultListModelWrong.add(0, randomMultiplicand + " * " + randomMultiplier
                        + " = " + (randomMultiplicand * randomMultiplier));
                markRepeat(randomMultiplicand);
                markRepeat(randomMultiplier);
                failsList.setSelectedIndex(0);
                quantityWrong.setText(String.valueOf(defaultListModelWrong.getSize()));
                wrong.setText(quantityWrong.getText());
//                JOptionPane.showMessageDialog(this,
//                        randomMultiplicand + " * " + randomMultiplier
//                        + " = " + (randomMultiplicand * randomMultiplier),
//                        "Product Error",
//                        JOptionPane.ERROR_MESSAGE);
            }
            if (correctAnswer.isSelected()) {
                defaultListModelCorrect.add(0, randomMultiplicand + " * " + randomMultiplier
                        + " = " + (randomMultiplicand * randomMultiplier));
                correctList.setSelectedIndex(0);
                quantityCorrect.setText(String.valueOf(defaultListModelCorrect.getSize()));
                correct.setText(quantityCorrect.getText());
            }
            Integer quantityLeft = Integer.valueOf(multiplications.getText()) - defaultListModelCorrect.getSize() - defaultListModelWrong.getSize();
            left.setText(quantityLeft.toString());
            if (quantityLeft == 0) {
                multiplicand.setText("  ");
                multiplier.setText("  ");
                product.setText("   ");
                removeFocus(product);
                product.setEditable(false);
                writeReportMultiplications();
                start.setText("Start!");
            }
        });
        timerChecker.setRepeats(false);

        Timer timerChallenger = new Timer(delayTimer * 1000, (ActionEvent e) -> {

//            System.out.println("\nquantityMultiplications: " + quantityMultiplications);
//            MAP_MULTIPLICAND.forEach((K, V) -> System.out.println("Multiplicand: " + K + ", Multipliers: " + V.toString()));
            try {
                Integer randomIndexMultiplicand = ThreadLocalRandom.current().nextInt(0, MAP_MULTIPLICAND.size());
                List<Integer> listKeys = new ArrayList<>(MAP_MULTIPLICAND.keySet());
                Integer randomMultiplicand = listKeys.get(randomIndexMultiplicand);

                MultiplierList multiplierList = MAP_MULTIPLICAND.get(randomMultiplicand);
                Integer randomMultiplier = multiplierList.getRandomMultiplier();

//                System.out.println("\nrandomMultiplicand: " + randomMultiplicand
//                        + "\trandomMultiplier: " + randomMultiplier
//                        + "\n\tmultiplierList.size(): " + multiplierList.size()
//                        + "\n\tmultiplierList: " + multiplierList.toString()
//                );
                if (MAP_MULTIPLICAND.get(randomMultiplicand).isEmpty()) {
                    MAP_MULTIPLICAND.remove(randomMultiplicand);
                }
                multiplicand.setText(randomMultiplicand.toString());
                multiplier.setText(randomMultiplier.toString());
                product.setText("");
                removeFocus(product);
                java.awt.Toolkit.getDefaultToolkit().beep();
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            beep(16000, 250);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(TestMult.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (LineUnavailableException ex) {
                            Logger.getLogger(TestMult.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }).start();
//                System.out.println("\007");
//                beep(16000, 250);

                remainingTime.setText(delayTimer.toString());
                timerChecker.start();
                quantityMultiplications--;
            } catch (Exception ex) {

            }

            if (nestedTimer.getTimerRepeat() != null) {
                if (nestedTimer.getTimerRepeat().isRunning()) {
                    nestedTimer.getTimerRepeat().restart();
                } else {
                    nestedTimer.getTimerRepeat().start();
                }

            }
        });
        //timerChallenger.setRepeats(true);
        timerChallenger.start();

        nestedTimer.createTimer((ActionEvent e) -> {
            if (MAP_MULTIPLICAND.isEmpty()) {
                timerChallenger.setRepeats(false);
            }
        });

    }//GEN-LAST:event_startActionPerformed

    private void multiplicandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_multiplicandMouseClicked
        // TODO add your handling code here:
        fillMultiplicandList();
        qtyMultiplicands.setText(Integer.toString(MAP_MULTIPLICAND.size()));
    }//GEN-LAST:event_multiplicandMouseClicked

    private void multiplierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_multiplierMouseClicked
        // TODO add your handling code here:
        fillMultiplierList();
        qtyMultipliers.setText(Integer.toString(LIST_MULTIPLIER.size()));
    }//GEN-LAST:event_multiplierMouseClicked

    private void removeFocus(JComponent component) {
        component.setFocusable(false);
        component.setFocusable(true);
        component.requestFocus();
    }

    private void writeReportMultiplications() {

        String today = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String filename = "multiplications_" + today + ".txt";
        String location = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
        Path path = Paths.get(location, filename);

        try {
            if (Files.notExists(path)) {
                Files.createFile(path);
            }
            Files.write(path, getReportMultiplications().getBytes(), StandardOpenOption.APPEND);
        } catch (IOException ex) {
            Logger.getLogger(TestMult.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getReportMultiplications() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(System.getProperty("line.separator"));
        stringBuilder.append(System.getProperty("line.separator"));
        stringBuilder.append("Date-Time: ");
        stringBuilder.append(new SimpleDateFormat("yyyy/MM/dd-HH:mm:ss").format(new Date()));
        stringBuilder.append(System.getProperty("line.separator"));
        stringBuilder.append(getMultiplicand());
        stringBuilder.append(getMultiplier());
        stringBuilder.append(getCorrect());
        stringBuilder.append(getWrong());
        stringBuilder.append(getRepeat());
        System.out.println("stringBuilder.toString(): " + stringBuilder.toString());
        return stringBuilder.toString();
    }

    private String getCorrect() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Corrects: ");
        List listCorrect = IntStream.range(0, defaultListModelCorrect.size())
                .mapToObj(defaultListModelCorrect::get)
                .collect(Collectors.toList());
        stringBuilder.append(String.join(System.getProperty("line.separator") + "\t", listCorrect));
        stringBuilder.append(System.getProperty("line.separator"));
        return stringBuilder.toString();
    }

    private String getWrong() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Wrongs: ");
        List listCorrect = IntStream.range(0, defaultListModelWrong.size())
                .mapToObj(defaultListModelWrong::get)
                .collect(Collectors.toList());
        stringBuilder.append(String.join(System.getProperty("line.separator") + "\t", listCorrect));
        stringBuilder.append(System.getProperty("line.separator"));
        return stringBuilder.toString();
    }

    private String getMultiplicand() {
        StringBuilder stringBuilder = new StringBuilder();
        if (multiplicand0.isSelected()) {
            Integer number = Integer.valueOf(multiplicand0.getText());
            stringBuilder.append(number);
        }
        if (multiplicand1.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand1.getText());
            stringBuilder.append(number);
        }
        if (multiplicand2.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand2.getText());
            stringBuilder.append(number);
        }
        if (multiplicand3.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand3.getText());
            stringBuilder.append(number);
        }
        if (multiplicand4.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand4.getText());
            stringBuilder.append(number);
        }
        if (multiplicand5.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand5.getText());
            stringBuilder.append(number);
        }
        if (multiplicand6.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand6.getText());
            stringBuilder.append(number);
        }
        if (multiplicand7.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand7.getText());
            stringBuilder.append(number);
        }
        if (multiplicand8.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand8.getText());
            stringBuilder.append(number);
        }
        if (multiplicand9.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand9.getText());
            stringBuilder.append(number);
        }
        if (multiplicand10.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(multiplicand10.getText());
            stringBuilder.append(number);
        }
        stringBuilder.insert(0, "Multiplicands: [");
        stringBuilder.append("]");
        stringBuilder.append(System.getProperty("line.separator"));
        return stringBuilder.toString();
    }

    private String getMultiplier() {
        StringBuilder stringBuilder = new StringBuilder();
        if (mutliplier0.isSelected()) {
            Integer number = Integer.valueOf(mutliplier0.getText());
            stringBuilder.append(number);
        }
        if (mutliplier1.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier1.getText());
            stringBuilder.append(number);
        }
        if (mutliplier2.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier2.getText());
            stringBuilder.append(number);
        }
        if (mutliplier3.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier3.getText());
            stringBuilder.append(number);
        }
        if (mutliplier4.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier4.getText());
            stringBuilder.append(number);
        }
        if (mutliplier5.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier5.getText());
            stringBuilder.append(number);
        }
        if (mutliplier6.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier6.getText());
            stringBuilder.append(number);
        }
        if (mutliplier7.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier7.getText());
            stringBuilder.append(number);
        }
        if (mutliplier8.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier8.getText());
            stringBuilder.append(number);
        }
        if (mutliplier9.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier9.getText());
            stringBuilder.append(number);
        }
        if (mutliplier10.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(mutliplier10.getText());
            stringBuilder.append(number);
        }
        stringBuilder.insert(0, "Multipliers: [");
        stringBuilder.append("]");
        stringBuilder.append(System.getProperty("line.separator"));
        return stringBuilder.toString();
    }

    private String getRepeat() {
        StringBuilder stringBuilder = new StringBuilder();
        if (repeat0.isSelected()) {
            Integer number = Integer.valueOf(repeat0.getText());
            stringBuilder.append(number);
        }
        if (repeat1.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat1.getText());
            stringBuilder.append(number);
        }
        if (repeat2.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat2.getText());
            stringBuilder.append(number);
        }
        if (repeat3.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat3.getText());
            stringBuilder.append(number);
        }
        if (repeat4.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat4.getText());
            stringBuilder.append(number);
        }
        if (repeat5.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat5.getText());
            stringBuilder.append(number);
        }
        if (repeat6.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat6.getText());
            stringBuilder.append(number);
        }
        if (repeat7.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat7.getText());
            stringBuilder.append(number);
        }
        if (repeat8.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat8.getText());
            stringBuilder.append(number);
        }
        if (repeat9.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat9.getText());
            stringBuilder.append(number);
        }
        if (repeat10.isSelected()) {
            if (stringBuilder.toString().length() > 0) {
                stringBuilder.append(", ");
            }
            Integer number = Integer.valueOf(repeat10.getText());
            stringBuilder.append(number);
        }
        stringBuilder.insert(0, "Repeats: [");
        stringBuilder.append("]");
        stringBuilder.append(System.getProperty("line.separator"));
        return stringBuilder.toString();
    }

    private void delayerInSeconds(double seconds) {
        Long milliSeconds = (long) (1000 * seconds);
        delayer(milliSeconds);
    }

    private void delayer(Long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException ex) {
        }
    }

    private void fillMultiplicandList() {
        MAP_MULTIPLICAND.clear();
        if (multiplicand0.isSelected()) {
            Integer number = Integer.valueOf(multiplicand0.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand1.isSelected()) {
            Integer number = Integer.valueOf(multiplicand1.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand2.isSelected()) {
            Integer number = Integer.valueOf(multiplicand2.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand3.isSelected()) {
            Integer number = Integer.valueOf(multiplicand3.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand4.isSelected()) {
            Integer number = Integer.valueOf(multiplicand4.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand5.isSelected()) {
            Integer number = Integer.valueOf(multiplicand5.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand6.isSelected()) {
            Integer number = Integer.valueOf(multiplicand6.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand7.isSelected()) {
            Integer number = Integer.valueOf(multiplicand7.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand8.isSelected()) {
            Integer number = Integer.valueOf(multiplicand8.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand9.isSelected()) {
            Integer number = Integer.valueOf(multiplicand9.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }
        if (multiplicand10.isSelected()) {
            Integer number = Integer.valueOf(multiplicand10.getText());
            MAP_MULTIPLICAND.put(number, new MultiplierList(number));
        }

        quantityMultiplications = LIST_MULTIPLIER.size() * MAP_MULTIPLICAND.size();
        multiplications.setText(String.valueOf(quantityMultiplications));
        left.setText(multiplications.getText());
    }

    private void fillMultiplierList() {
        LIST_MULTIPLIER.clear();
        if (mutliplier0.isSelected()) {
            Integer number = Integer.valueOf(mutliplier0.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier1.isSelected()) {
            Integer number = Integer.valueOf(mutliplier1.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier2.isSelected()) {
            Integer number = Integer.valueOf(mutliplier2.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier3.isSelected()) {
            Integer number = Integer.valueOf(mutliplier3.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier4.isSelected()) {
            Integer number = Integer.valueOf(mutliplier4.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier5.isSelected()) {
            Integer number = Integer.valueOf(mutliplier5.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier6.isSelected()) {
            Integer number = Integer.valueOf(mutliplier6.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier7.isSelected()) {
            Integer number = Integer.valueOf(mutliplier7.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier8.isSelected()) {
            Integer number = Integer.valueOf(mutliplier8.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier9.isSelected()) {
            Integer number = Integer.valueOf(mutliplier9.getText());
            LIST_MULTIPLIER.add(number);
        }
        if (mutliplier10.isSelected()) {
            Integer number = Integer.valueOf(mutliplier10.getText());
            LIST_MULTIPLIER.add(number);
        }

        quantityMultiplications = LIST_MULTIPLIER.size() * MAP_MULTIPLICAND.size();
        multiplications.setText(String.valueOf(quantityMultiplications));
        left.setText(multiplications.getText());
    }

    private void markRepeat(int number) {
        switch (number) {
            case 0:
                repeat0.setSelected(true);
                repeat0.setForeground(Color.red);
                break;
            case 1:
                repeat1.setSelected(true);
                repeat1.setForeground(Color.red);
                break;
            case 2:
                repeat2.setSelected(true);
                repeat2.setForeground(Color.red);
                break;
            case 3:
                repeat3.setSelected(true);
                repeat3.setForeground(Color.red);
                break;
            case 4:
                repeat4.setSelected(true);
                repeat4.setForeground(Color.red);
                break;
            case 5:
                repeat5.setSelected(true);
                repeat5.setForeground(Color.red);
                break;
            case 6:
                repeat6.setSelected(true);
                repeat6.setForeground(Color.red);
                break;
            case 7:
                repeat7.setSelected(true);
                repeat7.setForeground(Color.red);
                break;
            case 8:
                repeat8.setSelected(true);
                repeat8.setForeground(Color.red);
                break;
            case 9:
                repeat9.setSelected(true);
                repeat9.setForeground(Color.red);
                break;
            case 10:
                repeat10.setSelected(true);
                repeat10.setForeground(Color.red);
                break;

        }
    }

    public static void beep(double freq, final double millis) throws InterruptedException, LineUnavailableException {

        final Clip clip = AudioSystem.getClip();
        /**
         * AudioFormat of the reclieved clip. Probably you can alter it someway
         * choosing proper Line.
         */
        AudioFormat af = clip.getFormat();

        /**
         * We assume that encoding uses signed shorts. Probably we could make
         * this code more generic but who cares.
         */
        if (af.getEncoding() != AudioFormat.Encoding.PCM_SIGNED) {
            throw new UnsupportedOperationException("Unknown encoding");
        }

        if (af.getSampleSizeInBits() != 16) {
            System.err.println("Weird sample size.  Dunno what to do with it.");
            return;
        }

        /**
         * Number of bytes in a single frame
         */
        int bytesPerFrame = af.getFrameSize();
        /**
         * Number of frames per second
         */
        double fps = af.getFrameRate();
        /**
         * Number of frames during the clip .
         */
        int frames = (int) (fps * (millis / 1000D));

        /**
         * Data
         */
        ByteBuffer data = ByteBuffer.allocate(frames * bytesPerFrame);

        /**
         * We will emit sinus, which needs to be scaled so it has proper
         * frequency --- here is the scaling factor.
         */
        double freqFactor = (Math.PI / 2) * freq / fps;
        /**
         * This sinus must also be scaled so it fills short.
         */
        double ampFactor = Short.MAX_VALUE;

        short sample;

        for (int frame = 0; frame < frames; frame++) {
            sample = (short) (ampFactor * Math.sin(frame * freqFactor));
            data.putShort(sample);
        }
        clip.open(af, data.array(), 0, data.position());

        // This is so Clip releases its data line when done.  Otherwise at 32 clips it breaks.
        clip.addLineListener(new LineListener() {
            @Override
            public void update(LineEvent event) {
                if (event.getType() == LineEvent.Type.START) {
                    Timer t = new Timer((int) millis + 1, new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            clip.close();
                        }
                    });
                    t.setRepeats(false);
                    t.start();
                }
            }
        });
        clip.start();

        Thread.sleep((long) millis);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TestMult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TestMult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TestMult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TestMult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestMult().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton WrongAnswer;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField correct;
    private javax.swing.JRadioButton correctAnswer;
    private javax.swing.JList<String> correctList;
    private javax.swing.JList<String> failsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField left;
    private javax.swing.JTextField multiplicand;
    private javax.swing.JCheckBox multiplicand0;
    private javax.swing.JCheckBox multiplicand1;
    private javax.swing.JCheckBox multiplicand10;
    private javax.swing.JCheckBox multiplicand2;
    private javax.swing.JCheckBox multiplicand3;
    private javax.swing.JCheckBox multiplicand4;
    private javax.swing.JCheckBox multiplicand5;
    private javax.swing.JCheckBox multiplicand6;
    private javax.swing.JCheckBox multiplicand7;
    private javax.swing.JCheckBox multiplicand8;
    private javax.swing.JCheckBox multiplicand9;
    private javax.swing.JTextField multiplications;
    private javax.swing.JTextField multiplier;
    private javax.swing.JCheckBox mutliplier0;
    private javax.swing.JCheckBox mutliplier1;
    private javax.swing.JCheckBox mutliplier10;
    private javax.swing.JCheckBox mutliplier2;
    private javax.swing.JCheckBox mutliplier3;
    private javax.swing.JCheckBox mutliplier4;
    private javax.swing.JCheckBox mutliplier5;
    private javax.swing.JCheckBox mutliplier6;
    private javax.swing.JCheckBox mutliplier7;
    private javax.swing.JCheckBox mutliplier8;
    private javax.swing.JCheckBox mutliplier9;
    private javax.swing.JTextField product;
    private javax.swing.JTextField qtyMultiplicands;
    private javax.swing.JTextField qtyMultipliers;
    private javax.swing.JTextField quantityCorrect;
    private javax.swing.JTextField quantityWrong;
    private javax.swing.JTextField remainingTime;
    private javax.swing.JCheckBox repeat0;
    private javax.swing.JCheckBox repeat1;
    private javax.swing.JCheckBox repeat10;
    private javax.swing.JCheckBox repeat2;
    private javax.swing.JCheckBox repeat3;
    private javax.swing.JCheckBox repeat4;
    private javax.swing.JCheckBox repeat5;
    private javax.swing.JCheckBox repeat6;
    private javax.swing.JCheckBox repeat7;
    private javax.swing.JCheckBox repeat8;
    private javax.swing.JCheckBox repeat9;
    private javax.swing.JButton start;
    private javax.swing.JComboBox timeComboBox;
    private javax.swing.JTextField wrong;
    // End of variables declaration//GEN-END:variables
}

class MultiplierList {

    int multiplicand;
    private List<Integer> listMultiplier = new ArrayList(TestMult.LIST_MULTIPLIER);

    MultiplierList(int multiplicand) {
        this.multiplicand = multiplicand;
    }

    public int getMultiplicand() {
        return multiplicand;
    }

    public List<Integer> getListMultiplier() {
        return listMultiplier;
    }

    public void removeMultiplierNumber(int index) {
        listMultiplier.remove(index);
    }

    public boolean isEmpty() {
        return listMultiplier.isEmpty();
    }

    public int size() {
        return listMultiplier.size();
    }

    public Integer getRandomMultiplier() {
        int randomIndexMultiplier = ThreadLocalRandom.current().nextInt(0, listMultiplier.size());
        int randomMultiplier = listMultiplier.get(randomIndexMultiplier);
        listMultiplier.remove(randomIndexMultiplier);
        return randomMultiplier;
    }

    @Override
    public String toString() {
        return "MultiplierList{" + "multiplicand=" + multiplicand + ", listMultiplier=" + listMultiplier.toString() + '}';
    }

}

class NestedTimer {

    Timer timerRepeat;

    public void createTimer(ActionListener listener) {
        timerRepeat = new Timer(0, listener);
        timerRepeat.setRepeats(false);
    }

    public Timer getTimerRepeat() {
        return timerRepeat;
    }

}
